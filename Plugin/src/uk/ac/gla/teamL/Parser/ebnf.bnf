// This was created using guidance from http://jflex.de/manual.html
// and https://github.com/JetBrains/Grammar-Kit/blob/master/TUTORIAL.md

{

	parserClass="uk.ac.gla.teamL.Parser.EBNFParser"
    parserUtilClass="uk.ac.gla.teamL.Parser.EBNFParserUtil"

	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

	psiClassPrefix="EBNF"
	psiImplClassSuffix="Impl"
	psiPackage="uk.ac.gla.teamL.Parser.psi"
	psiImplPackage="uk.ac.gla.teamL.Parser.psi.impl"

	elementTypeHolderClass="uk.ac.gla.teamL.Parser.psi.EBNFTypes"
	elementTypeClass="uk.ac.gla.teamL.Parser.psi.EBNFElementType"
	tokenTypeClass="uk.ac.gla.teamL.Parser.psi.EBNFTokenType"

	tokens = [

		comment_singleline = "regexp://[^\n]*"
		comment_block = "regexp:/\*[^*\\]*\*/"

		ID = "regexp:[A-z][A-z|0-9|_]*"

		// Match all characters except the outer character, unless it is
		// escaped using the '\' character.
		// Strings can be enclosed in: "..." OR '...'
		string_doubleQuotes = 'regexp:"([^"\\]|\\.)*"'
		string_singleQuotes = "regexp:'([^'\\]|\\.)*'"
		string_tripleQuotes = "regexp:'''([^'''\\]|\\.)*'''"

		regular_expression_identifier = "regex:"

		EQ = '='
		OR = '|'
		AND = ','

		LB = '('
		RB = ')'
		LOB = '{'
		ROB = '}'

		REPEAT = "*"
		ZERO_OR_ONE = "?"
		ONE_OR_MORE = "+"

		TERMINAL = ";"
	]
}

program ::= assignment*

assignment ::= identifier EQ rule terminal

rule ::= ruleElement OR {rule}*
	   | ruleElement {rule}*

ruleElement ::= ( string
			    | identifier
			    | regularExpression
			    | nestedRule
			    | optionalRule
			    ) {REPEAT|ZERO_OR_ONE|ONE_OR_MORE}?

nestedRule ::= LB rule RB
optionalRule ::= LOB rule ROB

regularExpression ::= REGULAR_EXPRESSION_IDENTIFIER string

string ::= string_singleQuotes
		 | string_doubleQuotes
		 | string_tripleQuotes

identifier ::= ID
