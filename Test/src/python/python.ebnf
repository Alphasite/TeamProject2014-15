// Grammar for Python

// Note =  Changing the grammar specified in this file will most likely
//        require corresponding changes in the parser module
//        (../Modules/parsermodule.c).  If you can't make the changes to
//        that module yourself, please co-ordinate the required changes
//        with someone who can; ask around on python-dev for help.  Fred
//        Drake <fdrake@acm.org> will probably be listening there.

// NOTE WELL = You should also follow all the steps listed in PEP 306,
// "How to Change Python's Grammar"

// Start symbols for the grammar =
//       single_input is a single interactive statement;
//       file_input is a module or sequence of commands read from an input file;
//       eval_input is the input for the eval() functions.
// NB = compound_stmt in single_input is followed by extra NEWLINE!

let single_input = NEWLINE
                   | simple_stmt
                   | compound_stmt NEWLINE;

let file_input = (NEWLINE | stmt)* ENDMARKER;

let eval_input = testlist NEWLINE* ENDMARKER;

let decorator = '@' dotted_name ( "(" (arglist)? ")" )? NEWLINE;
let decorators = decorator+;
let decorated = decorators (classdef | funcdef);

let funcdef = 'def' NAME parameters ('->' test)? ':' suite;

let parameters = "(" (typedargslist)? ")";

let typedargslist = (tfpdef
                     ("=" test)?
                     ("," tfpdef ("=" test)?)*
                     ("," ("*" (tfpdef)? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? | '**' tfpdef)?
                     )?
                     | "*" (tfpdef)? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? | '**' tfpdef
                    );

let tfpdef = NAME (':' test)?;
let varargslist = (vfpdef
                   ('=' test)?
                   (',' vfpdef ('=' test)?)*
                   (',' ('*' (vfpdef)? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? | '**' vfpdef)?)?
                   | '*' (vfpdef)? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? | '**' vfpdef
                  );
let vfpdef = NAME;

let stmt = simple_stmt | compound_stmt;

let simple_stmt = small_stmt (';' small_stmt)* (';')? NEWLINE;

let small_stmt = (expr_stmt | del_stmt | pass_stmt | flow_stmt |
                  import_stmt | global_stmt | nonlocal_stmt | assert_stmt);

let expr_stmt = testlist_star_expr
                (augassign (yield_expr | testlist) | ('=' (yield_expr | testlist_star_expr))*);


let testlist_star_expr = (test | star_expr) (',' (test | star_expr))* (',')?;

let augassign = ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
                 '<<=' | '>>=' | '**=' | '//=');

// For normal assignments, additional restrictions enforced by the interpreter
let del_stmt = 'del' exprlist;
let pass_stmt = 'pass';
let flow_stmt = break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt;
let break_stmt = 'break';
let continue_stmt = 'continue';
let return_stmt = 'return' (testlist)?;
let yield_stmt = yield_expr;
let raise_stmt = 'raise' (test ('from' test)?)?;
let import_stmt = import_name | import_from;
let import_name = 'import' dotted_as_names;

// note below = the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
let import_from = ('from' (('.' | '...')* dotted_name | ('.' | '...')+) 'import' ('*' | "(" import_as_names ")" | import_as_names));
let import_as_name = NAME ('as' NAME)?;
let dotted_as_name = dotted_name ('as' NAME)?;
let import_as_names = import_as_name (',' import_as_name)* (',')?;
let dotted_as_names = dotted_as_name (',' dotted_as_name)*;
let dotted_name = NAME ('.' NAME)*;
let global_stmt = 'global' NAME (',' NAME)*;
let nonlocal_stmt = 'nonlocal' NAME (',' NAME)*;
let assert_stmt = 'assert' test (',' test)?;

let compound_stmt = if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated;
let if_stmt = 'if' test ':' suite ('elif' test ':' suite)* ('else' ':' suite)?;
let while_stmt = 'while' test ':' suite ('else' ':' suite)?;
let for_stmt = 'for' exprlist 'in' testlist ':' suite ('else' ':' suite)?;
let try_stmt = ('try' ':' suite
                ((except_clause ':' suite)+
                 ('else' ':' suite)?
                 ('finally' ':' suite)? |
                 'finally' ':' suite));
let with_stmt = 'with' with_item (',' with_item)*  ':' suite;
let with_item = test ('as' expr)?;

// NB compile.c makes sure that the default except clause is last
let except_clause = 'except' (test ('as' NAME)?)?;
let suite = simple_stmt | NEWLINE INDENT stmt+ DEDENT;

let test = or_test ('if' or_test 'else' test)? | lambdef;
let test_nocond = or_test | lambdef_nocond;
let lambdef = 'lambda' (varargslist)? ':' test;
let lambdef_nocond = 'lambda' (varargslist)? ':' test_nocond;
let or_test = and_test ('or' and_test)*;
let and_test = not_test ('and' not_test)*;
let not_test = 'not' not_test | comparison;
let comparison = expr (comp_op expr)*;

// <> isn't actually a valid comparison operator in Python. It's here for the
// sake of a __future__ import described in PEP 401

let comp_op = '<' | '>' | '==' | '>=' | '<=' | '<>' | '!=' | 'in' | 'not' 'in' | 'is' | 'is' 'not';
let star_expr = '*' expr;
let expr = xor_expr ('|' xor_expr)*;
let xor_expr = and_expr ('^' and_expr)*;
let and_expr = shift_expr ('&' shift_expr)*;
let shift_expr = arith_expr (('<<' | '>>') arith_expr)*;
let arith_expr = term (('+' | '-') term)*;
let term = factor (('*' | '/' | '%' | '//') factor)*;
let factor = ('+' | '-' | '~') factor | power;
let power = atom trailer* ('**' factor)?;
let atom = ("(" (yield_expr | testlist_comp)? ")" |
            '[' (testlist_comp)? ']' |
            '{' (dictorsetmaker)? '}' |
            NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False');
let testlist_comp = (test | star_expr) ( comp_for | (',' (test | star_expr))* (',')? );
let trailer = "(" (arglist)? ")" | "[" subscriptlist "]" | '.' NAME;
let subscriptlist = subscript (',' subscript)* (',')?;
let subscript = test | (test)? ':' (test)? (sliceop)?;
let sliceop = ':' (test)?;
let exprlist = (expr | star_expr) (',' (expr | star_expr))* (',')?;
let testlist = test (',' test)* (',')?;
let dictorsetmaker = ( (test ':' test (comp_for | (',' test ':' test)* (',')?)) |
                       (test (comp_for | (',' test)* (',')?)) );

let classdef = 'class' NAME ("(" arglist? ")")? ':' suite;

let arglist = (argument ',')* (argument ','?
                               | '*' test (',' argument)* (',' '**' test)?
                               | '**' test);

// The reason that keywords are test nodes instead of NAME is that using NAME
// results in an ambiguity. ast.c makes sure it's a NAME.
let argument = test (comp_for)? | test '=' test;
// Really (keyword '='] test
let comp_iter = comp_for | comp_if;
let comp_for = 'for' exprlist 'in' or_test (comp_iter)?;
let comp_if = 'if' test_nocond (comp_iter)?;

// not used in grammar, but may appear in "node" passed from Parser to Compiler
let encoding_decl = NAME;

let yield_expr = 'yield' (yield_arg)?;
let yield_arg = 'from' test | testlist;

let NAME = character (character | number | "_" | "-")*;
@Regex let NEWLINE = "\r"? "\n";
@Regex let NUMBER = ["0".."9"]+;

@Regex let INDENT = "\t" | " "{2,4};
@Regex let DEDENT = !.;

@Regex
let STRING = ('"' | "'" | "'''")
             (!('"' | "'" | "'''") | "\'" | '\"')*
             ('"' | "'" | "'''");